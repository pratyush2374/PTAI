datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  userName         String            @unique
  email            String            @unique
  password         String
  googleId         String?
  profilePic       String?
  refreshToken     String?
  dob              DateTime
  age              Int
  gender           Gender
  height           Float
  weights          Weight[]
  additionalInfo   String
  preferences      UserPreferences?
  healthAndDietary HealthAndDietary?
  stats            Stats?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Weight {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  weight Float
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.ObjectId
}

model UserPreferences {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  activityLevel            String
  preferredExerciseType    String[]
  exerciseExperience       String
  workoutDuration          String
  exerciseFrequency        String
  macronutrientPreferences String[]
  fitnessGoals             String[]
  pace                     String
  availableEquipments      String[]
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String   @unique @db.ObjectId
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model HealthAndDietary {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  dietaryPreferences String[]
  healthProblems     String[]
  allergies          String[]
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique @db.ObjectId
}

model Stats {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  daily             DailyStat[]
  currentStreak     Int
  highestStreak     Int
  achievements      String[]
  totalWeightChange Float
  averageWeight     Float
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String      @unique @db.ObjectId
}

model DailyStat {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime @default(now())
  stats   Stats    @relation(fields: [statsId], references: [id])
  statsId String   @db.ObjectId

  // Exercise stats
  minutesWorkedOut Int?
  caloriesBurnt    Int?
  exercises        Exercise[]

  // Diet stats
  caloriesGained Int?
  meals          Meal[]
  waterIntake    Int?

  // Health stats
  stepCount        Int?
  currentWeight    Float?
  distanceWalked   Float  @default(0)
  distanceRunned   Float  @default(0)
  totalHoursSlept  Float?
  averageHeartRate Int?
}

model Exercise {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  exerciseName    String
  exerciseType    String[]
  primaryMuscle   String
  secondaryMuscle String?
  duration        Int
  equipment       String
  calorieBurn     Int
  sets            Int
  reps            Int
  restTime        Int
  advice          String    @db.String
  dailyStat       DailyStat @relation(fields: [dailyStatId], references: [id])
  dailyStatId     String    @db.ObjectId
}

model Meal {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  type           MealType
  name           String
  category       String[]
  weight         Float
  calories       Int
  protein        Float
  carbs          Float
  fats           Float
  fibre          Float
  otherNutrients String
  ingredients    String[]
  allergens      String?
  cookingTime    Int
  recipe         String    @db.String
  dailyStat      DailyStat @relation(fields: [dailyStatId], references: [id])
  dailyStatId    String    @db.ObjectId
}

enum MealType {
  BREAKFAST
  LUNCH
  SNACK
  DINNER
}
